---
import { getDecorators } from 'typescript';
interface Props {
	body: string;
	door_num: string;
}

const { body, door_num } = Astro.props;



---



<button id="a" class="link-card" >
	<a href="#">
		<h2>
			Abrir Puerta 1
		</h2>
	</a>
</button>
<button id="b" class="link-card" >
	<a>
		<h2>
			Abrir Puerta 2
		</h2>
	</a>
</button>
<button id="d" class="link-card" >
	<a>
		<h2>
			Cerrar Puertas
		</h2>
	</a>
</button>
<br>
<button id="e" class="link-card" onload="getDoor()" >
	<a>
		<h2>
			Cargar tabla Puertas
		</h2>
	</a>
</button>
<button id="f" class="link-card" >
	<a>
		<h2>
			Cargar tabla Rfid
		</h2>
	</a>
</button>
<!-- draw a table -->
<table >
	<tr>
		<th>Puerta</th>
		<th>Estado</th>
	</tr>
	<tr>
		<td>Puerta 1</td>
		<td id="door-1">Cerrada</td>
	</tr>
	<tr>
		<td>Puerta 2</td> 
		<td id="door-2">Cerrada</td>
	</tr>
</table>

<table id="rfid">
	<tr>
		<th>Id</th>
		<th>AntennaPort</th>
		<th>Epc</th>
		<th>Timestamp</th>
	</tr>
</table>

<style>
	.link-card {
		list-style: none;
		display: flex;
		padding: 1px;
		background-color: #23262d;
		background-image: none;
		background-size: 400%;
		border-radius: 7px;
		background-position: 100%;
		transition: background-position 0.6s cubic-bezier(0.22, 1, 0.36, 1);
		box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.1);
	}
	.link-card > a {
		width: 100%;
		text-decoration: none;
		line-height: 1.4;
		padding: calc(1.5rem - 1px);
		border-radius: 8px;
		color: white;
		background-color: #23262d;
		opacity: 0.8;
	}
	h2 {
		margin: 0;
		font-size: 1.25rem;
		transition: color 0.6s cubic-bezier(0.22, 1, 0.36, 1);
	}
	p {
		margin-top: 0.5rem;
		margin-bottom: 0;
	}
	.link-card:is(:hover, :focus-within) {
		background-position: 0;
		background-image: var(--accent-gradient);
	}
	.link-card:is(:hover, :focus-within) h2 {
		color: rgb(var(--accent-light));
	}
	td {
		align-items: center;
		justify-content: center;
		text-align: center;
	}
	table {
		border-collapse: collapse;
		width: 100%;
		border: 1px solid #ddd;
		border-radi;
		
	}
	#d {
		width: 208%;
		background-color: #ddd;
	}
	tr th {
		background-color: #ddd;
		color: black;
	}
	#rfid {
		width: 150%;
	}
</style>

<script>
	
async function postQuery(id: number, num1: number, num2: number) {
// 	await fetch("http://103.23.60.158:80 ", {
// 		method: "POST",
// 		headers: {
// 			"Content-Type": "application/json",
// 			"Access-Control-Allow-Methods": "POST",
// 			"Access-Control-Allow-Headers": "Content-Type"
// 		},
// 		body: JSON.stringify({
// 			"id": id,
// 			"porta1": num1,
// 			"porta2": num2
// 		})
// 	})
// 	.then((response) => {
// 		console.log(response);
// 	})
// 	.catch((error) => {
// 		console.log(error);
// 	});
// }
	try {
		const response = await fetch("http://127.0.0.1:80/door-change", {
			method: "POST",
			headers: {
				"Content-Type": "application/json",
				"Access-Control-Allow-Methods": "POST",
				"Access-Control-Allow-Headers": "Content-Type"
			},
			body: JSON.stringify({
				"id": id,
				"porta1": num1,
				"porta2": num2
			})
		});
		const data = await response.json();
		console.log(data);
	} catch (error) {
		console.log(error);
	}
}


async function getDoor() {
	try {
		const response = await fetch("http://127.0.0.1:80/door", {
			method: "GET",
			headers: {
				"Access-Control-Allow-Origin": "*",
				"Access-Control-Allow-Methods": "*",
				"Access-Control-Allow-Headers": "Content-Type",
			},
		});
		const data = await response.json();
    	console.log(data);

		let porta1 = data.porta1;
		let porta2 = data.porta2;
		
		if (porta1 == 1) {
			document.getElementById("door-1")!.innerHTML = "Abierta";
		} else {
			document.getElementById("door-1")!.innerHTML = "Cerrada";
		}
		if (porta2 == 1) {
			document.getElementById("door-2")!.innerHTML = "Abierta";
		} else {
			document.getElementById("door-2")!.innerHTML = "Cerrada";
		}


	} catch (error) {
		console.log(error);
	}
}

async function getRfid() {
	try {
		const response = await fetch("http://127.0.0.1:80/rfid", {
			method: "GET",
			headers: {
				"Access-Control-Allow-Origin": "*",
				"Access-Control-Allow-Methods": "*",
				"Access-Control-Allow-Headers": "Content-Type",
			},
		});
		const data = await response.json();
		console.log(data);
		//id, antennaPort, epc, timestamp
		for (let i = 0; i < data.length; i++) {
			let id = data[i].id;
			let antennaPort = data[i].antennaPort;
			let epc = data[i].epc;
			let timestamp = data[i].timestamp;
			//create a new row
			let table = document.getElementById("rfid");
			table!.innerHTML = '<tr><th>Id</th><th>AntennaPort</th><th>Epc</th><th>Timestamp</th></tr>' + "<tr><td>" + id + "</td><td>" + antennaPort + "</td><td>" + epc + "</td><td>" + timestamp + "</td></tr>";
		}




	} catch (error) {
		console.log(error);
	}
}


// 	let request = new XMLHttpRequest();
// 	request.open("GET", "http://127.0.0.1:80/hey");
// 	request.setRequestHeader("X-Requested-With", "XMLHttpRequest");
// 	request.setRequestHeader("Content-Type", "application/json");
// 	request.setRequestHeader("Access-Control-Allow-Origin", "*");
// 	request.mode = 'no-cors';
// 	//"Access-Control-Allow-Origin"
// 	request.send();
// 	//load the response int the conent button e
// 	request.onload = () => {
// 		console.log(request.responseText);
// 	};

// 	request.onerror = () => {
// 		console.log("error");
// 	};

// }

const tgt = document.querySelector("#a");
tgt!.addEventListener("click", () => {
	postQuery(1, 1, 0);
});

const tgt2 = document.querySelector("#b");
tgt2!.addEventListener("click", () => {
	postQuery(1, 0, 1);
  });


const tgt4 = document.querySelector("#d");
tgt4!.addEventListener("click", () => {
	postQuery(1, 0, 0);
  });
const tgt5 = document.querySelector("#e");
tgt5!.addEventListener("click", () => {
	getDoor();
  });

const tgt6 = document.querySelector("#f");
tgt6!.addEventListener("click", () => {
	getRfid();
  });


</script>